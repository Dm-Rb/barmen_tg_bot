from aiogram.types import Message, FSInputFile
from aiogram import Router, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import search_controller, data_controller
from keyboards import build_keyboard_with_pagination
from messages import msg_search_result, msg_add_data, msg_cocktail_params, msg_accept_add_data, msg_start_command
from aiogram.types.input_media_document import InputMediaDocument
import os
from io import BytesIO, TextIOWrapper


router = Router()


class PaginationState(StatesGroup):
    viewing_list = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞

class UploadFileState(StatesGroup):
    process_uploading = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞


@router.message(Command("start"))
async def start(message: Message):
    await message.answer(text=msg_start_command, parse_mode='HTML')


@router.message(Command("add"))
async def start(message: Message, bot: Bot):
    media = [
        InputMediaDocument(
            media=FSInputFile(os.path.join('files', 'template.csv')),  # –ø—É—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–∞–π–ª—É
            caption="–®–∞–±–ª–æ–Ω —Å —Ç–∞–±–ª–∏—Ü–µ–π"  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        ),
        InputMediaDocument(
            media=FSInputFile(os.path.join('files', "example.csv")),  # –ø—É—Ç—å –∫–æ –≤—Ç–æ—Ä–æ–º—É —Ñ–∞–π–ª—É
            caption="–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        )
    ]
    await message.answer(text=msg_add_data)
    await bot.send_media_group(chat_id=message.chat.id, media=media)

@router.message(Command("show_all"))
async def start(message: Message, state: FSMContext):
    cocktails_array = []
    for k, v in search_controller.cash_display_cocktail_names.items():
        cocktails_array.append(
            {
                'name': v,
                'id': k
            }
        )
    if cocktails_array:
        await state.set_state(PaginationState.viewing_list)
        await state.update_data(current_page=0, items=cocktails_array)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM)
        await message.answer(
            text=msg_search_result,
            parse_mode="HTML",
            reply_markup=await build_keyboard_with_pagination(cocktails_array)  # Shows pagination
        )


@router.message(F.text)
async def handle_user_message(message: Message, state: FSMContext):
    cocktails_array: list = await search_controller.get_cocktail_names_by_user_query(message.text)

    if cocktails_array:
        await state.set_state(PaginationState.viewing_list)
        await state.update_data(current_page=0, items=cocktails_array)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM)
        await message.answer(
            text=msg_search_result,
            parse_mode="HTML",
            reply_markup=await build_keyboard_with_pagination(cocktails_array)  # Shows pagination
        )
    else:
        await message.answer(
            text=msg_search_result + f"\n\n<i>–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</i> ü§∑ Ô∏è",
            parse_mode="HTML",
        )


@router.message(F.document)
async def handle_user_message(message: Message, bot: Bot, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ CSV (–ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ MIME-—Ç–∏–ø—É)
    if not message.document.file_name or not message.document.file_name.endswith('.csv'):
        return  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ CSV

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å (–ø–µ—Ä–µ–¥–∞—ë–º file_id, –∞ –Ω–µ Document)
    file_in_memory = BytesIO()
    await bot.download(
        message.document.file_id,  # –í–æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç!
        destination=file_in_memory
    )
    file_in_memory.seek(0)  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ

    # –ß–∏—Ç–∞–µ–º CSV —á–µ—Ä–µ–∑ csv.DictReader
    text_io = TextIOWrapper(file_in_memory, encoding='utf-8')
    try:
        new_cocktails_array = data_controller.preparing_csv_file(text_io)
        await state.set_state(UploadFileState.process_uploading)
        await state.update_data(current_i=0, items=new_cocktails_array)

    except Exception as _ex:
        await message.answer(text=f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {_ex}')
    await processing_new_cocktail(state, bot, message.chat.id)


@router.message(StateFilter(UploadFileState.process_uploading), F.photo)
async def save_new_cocktail(state: FSMContext, bot: Bot, message: Message):
    photo = message.photo[-1]
    file_in_memory = BytesIO()
    await bot.download(photo.file_id, destination=file_in_memory)
    file_in_memory.seek(0)  # –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–≤–æ–¥–∏–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ!
    photo_data = file_in_memory.getvalue()

    data = await state.get_data()
    current_i = int(data.get('current_i', 0))
    items = data.get('items', None)
    if not items:
        await state.clear()
        return
    if current_i >= len(items) - 1:
        await state.clear()
        return
    cocktail_data = items[current_i]
    # –¢—É—Ç –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

@router.message(StateFilter(UploadFileState.process_uploading))
async def processing_new_cocktail(state: FSMContext, bot: Bot, chat_id):
    data = await state.get_data()
    current_i = int(data.get('current_i', 0))
    items = data.get('items', None)
    if not items:
        await bot.send_message(chat_id=chat_id, text='–°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç.')
        await state.clear()
        return
    if current_i >= len(items) - 1:
        await state.clear()
        return
    message = msg_cocktail_params(items[current_i], '–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    message += '\n\n' + msg_accept_add_data
    await bot.send_message(chat_id=chat_id, text=message, parse_mode='HTML')
